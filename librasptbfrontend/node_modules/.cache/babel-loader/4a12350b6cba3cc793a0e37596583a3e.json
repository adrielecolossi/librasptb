{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adriele\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\librasptbsite\\\\librasptbfrontend\\\\src\\\\app2.js\";\nimport React, { Component } from \"react\";\nimport { uniqueId } from \"lodash\";\nimport filesize from \"filesize\";\nimport api from \"./services/api\";\nimport GlobalStyle from \"./styles/global\";\nimport { Container, Content } from \"./styles\";\nimport Upload from \"./components/Upload\";\nimport FileList from \"./components/FileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App2 extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      uploadedFiles: []\n    };\n\n    this.handleUpload = files => {\n      const uploadedFiles = files.map(file => ({\n        file,\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: false,\n        error: false,\n        url: null\n      }));\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n      });\n      uploadedFiles.forEach(this.processUpload);\n    };\n\n    this.updateFile = (id, data) => {\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.map(uploadedFile => {\n          return id === uploadedFile.id ? { ...uploadedFile,\n            ...data\n          } : uploadedFile;\n        })\n      });\n    };\n\n    this.processUpload = uploadedFile => {\n      const data = new FormData();\n      data.append(\"file\", uploadedFile.file, uploadedFile.name);\n      api.post(\"posts\", data, {\n        onUploadProgress: e => {\n          const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n          this.updateFile(uploadedFile.id, {\n            progress\n          });\n        }\n      }).then(response => {\n        this.updateFile(uploadedFile.id, {\n          uploaded: true,\n          id: response.data._id,\n          url: response.data.url\n        });\n      }).catch(() => {\n        this.updateFile(uploadedFile.id, {\n          error: true\n        });\n      });\n    };\n\n    this.handleDelete = async id => {\n      await api.delete(`posts/${id}`);\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await api.get(\"posts\");\n    this.setState({\n      uploadedFiles: response.data.map(file => ({\n        id: file._id,\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }))\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n  }\n\n  render() {\n    const {\n      uploadedFiles\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Content, {\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          onUpload: this.handleUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), !!uploadedFiles.length && /*#__PURE__*/_jsxDEV(FileList, {\n          files: uploadedFiles,\n          onDelete: this.handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App2;","map":{"version":3,"sources":["C:/Users/Adriele/OneDrive/Área de Trabalho/librasptbsite/librasptbfrontend/src/app2.js"],"names":["React","Component","uniqueId","filesize","api","GlobalStyle","Container","Content","Upload","FileList","App2","state","uploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","uploaded","error","url","setState","concat","forEach","processUpload","updateFile","data","uploadedFile","FormData","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","then","response","_id","catch","handleDelete","delete","filter","componentDidMount","get","componentWillUnmount","revokeObjectURL","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { uniqueId } from \"lodash\";\r\nimport filesize from \"filesize\";\r\n\r\nimport api from \"./services/api\";\r\n\r\nimport GlobalStyle from \"./styles/global\";\r\nimport { Container, Content } from \"./styles\";\r\n\r\nimport Upload from \"./components/Upload\";\r\nimport FileList from \"./components/FileList\";\r\n\r\nclass App2 extends Component {\r\n  state = {\r\n    uploadedFiles: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await api.get(\"posts\");\r\n\r\n    this.setState({\r\n      uploadedFiles: response.data.map(file => ({\r\n        id: file._id,\r\n        name: file.name,\r\n        readableSize: filesize(file.size),\r\n        preview: file.url,\r\n        uploaded: true,\r\n        url: file.url\r\n      }))\r\n    });\r\n  }\r\n\r\n  handleUpload = files => {\r\n    const uploadedFiles = files.map(file => ({\r\n      file,\r\n      id: uniqueId(),\r\n      name: file.name,\r\n      readableSize: filesize(file.size),\r\n      preview: URL.createObjectURL(file),\r\n      progress: 0,\r\n      uploaded: false,\r\n      error: false,\r\n      url: null\r\n    }));\r\n\r\n    this.setState({\r\n      uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\r\n    });\r\n\r\n    uploadedFiles.forEach(this.processUpload);\r\n  };\r\n\r\n  updateFile = (id, data) => {\r\n    this.setState({\r\n      uploadedFiles: this.state.uploadedFiles.map(uploadedFile => {\r\n        return id === uploadedFile.id\r\n          ? { ...uploadedFile, ...data }\r\n          : uploadedFile;\r\n      })\r\n    });\r\n  };\r\n\r\n  processUpload = uploadedFile => {\r\n    const data = new FormData();\r\n\r\n    data.append(\"file\", uploadedFile.file, uploadedFile.name);\r\n\r\n    api\r\n      .post(\"posts\", data, {\r\n        onUploadProgress: e => {\r\n          const progress = parseInt(Math.round((e.loaded * 100) / e.total));\r\n\r\n          this.updateFile(uploadedFile.id, {\r\n            progress\r\n          });\r\n        }\r\n      })\r\n      .then(response => {\r\n        this.updateFile(uploadedFile.id, {\r\n          uploaded: true,\r\n          id: response.data._id,\r\n          url: response.data.url\r\n        });\r\n      })\r\n      .catch(() => {\r\n        this.updateFile(uploadedFile.id, {\r\n          error: true\r\n        });\r\n      });\r\n  };\r\n\r\n  handleDelete = async id => {\r\n    await api.delete(`posts/${id}`);\r\n\r\n    this.setState({\r\n      uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\r\n    });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\r\n  }\r\n\r\n  render() {\r\n    const { uploadedFiles } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <Content>\r\n          <Upload onUpload={this.handleUpload} />\r\n          {!!uploadedFiles.length && (\r\n            <FileList files={uploadedFiles} onDelete={this.handleDelete} />\r\n          )}\r\n        </Content>\r\n        <GlobalStyle />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App2;"]},"metadata":{},"sourceType":"module"}