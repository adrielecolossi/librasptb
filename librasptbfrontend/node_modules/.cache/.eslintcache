[{"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\index.js":"1","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\App.js":"2","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\reportWebVitals.js":"3","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formMarcarLacuna\\index.js":"4","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\splashScreen\\index.js":"5","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\form\\form.js":"6","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarLacuna\\index.js":"7","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAssociarColunas\\index.js":"8","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\form\\formimg.js":"9","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\login\\login.js":"10","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarPalavra\\index.js":"11","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaCorreta\\index.js":"12","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formOrdenarFrase\\index.js":"13","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formMarcarLacuna\\styles.js":"14","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarLacuna\\styles.js":"15","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAssociarColunas\\styles.js":"16","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaCorreta\\styles.js":"17","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\header\\index.js":"18","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Input\\index.js":"19","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Button\\index.js":"20","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\ThreeDotsWave\\index.js":"21","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\splashScreen\\styles.js":"22","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarPalavra\\styles.js":"23","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\login\\styles.js":"24","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formOrdenarFrase\\styles.js":"25","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\footer\\index.js":"26","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Input\\styles.js":"27","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\header\\styles.js":"28","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Button\\styles.js":"29","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Card\\index.js":"30","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\footer\\styles.js":"31","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Card\\styles.js":"32","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaLacuna\\index.js":"33","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaLacuna\\styles.js":"34"},{"size":517,"mtime":1658342833611,"results":"35","hashOfConfig":"36"},{"size":2254,"mtime":1658348959561,"results":"37","hashOfConfig":"36"},{"size":375,"mtime":1658342833612,"results":"38","hashOfConfig":"36"},{"size":10182,"mtime":1658356762905,"results":"39","hashOfConfig":"36"},{"size":3663,"mtime":1658932908109,"results":"40","hashOfConfig":"36"},{"size":10335,"mtime":1658342833604,"results":"41","hashOfConfig":"36"},{"size":8297,"mtime":1658350799119,"results":"42","hashOfConfig":"36"},{"size":12176,"mtime":1658929669072,"results":"43","hashOfConfig":"36"},{"size":3201,"mtime":1658342833604,"results":"44","hashOfConfig":"36"},{"size":2546,"mtime":1658346526192,"results":"45","hashOfConfig":"36"},{"size":9266,"mtime":1658929588465,"results":"46","hashOfConfig":"36"},{"size":11530,"mtime":1658924003265,"results":"47","hashOfConfig":"36"},{"size":9023,"mtime":1658929640931,"results":"48","hashOfConfig":"36"},{"size":1796,"mtime":1658352467082,"results":"49","hashOfConfig":"36"},{"size":1793,"mtime":1658350280241,"results":"50","hashOfConfig":"36"},{"size":2039,"mtime":1658350270115,"results":"51","hashOfConfig":"36"},{"size":2039,"mtime":1658349555694,"results":"52","hashOfConfig":"36"},{"size":887,"mtime":1658349899679,"results":"53","hashOfConfig":"36"},{"size":338,"mtime":1658342833601,"results":"54","hashOfConfig":"36"},{"size":491,"mtime":1658347909202,"results":"55","hashOfConfig":"36"},{"size":1623,"mtime":1658342833601,"results":"56","hashOfConfig":"36"},{"size":1165,"mtime":1658351574751,"results":"57","hashOfConfig":"36"},{"size":1656,"mtime":1658350295776,"results":"58","hashOfConfig":"36"},{"size":984,"mtime":1658342833611,"results":"59","hashOfConfig":"36"},{"size":1654,"mtime":1658350489221,"results":"60","hashOfConfig":"36"},{"size":339,"mtime":1658342833603,"results":"61","hashOfConfig":"36"},{"size":251,"mtime":1658342833601,"results":"62","hashOfConfig":"36"},{"size":522,"mtime":1658350146493,"results":"63","hashOfConfig":"36"},{"size":753,"mtime":1658351392651,"results":"64","hashOfConfig":"36"},{"size":423,"mtime":1658347951198,"results":"65","hashOfConfig":"36"},{"size":260,"mtime":1658342833603,"results":"66","hashOfConfig":"36"},{"size":2440,"mtime":1658351884765,"results":"67","hashOfConfig":"36"},{"size":9681,"mtime":1658350954904,"results":"68","hashOfConfig":"36"},{"size":1796,"mtime":1658352426752,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"127mduc",{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\index.js",[],["145","146"],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\App.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formMarcarLacuna\\index.js",["147","148"],"import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport axios from \"axios\";\r\nimport HeaderOne from \"../header/index.js\";\r\nimport { DivInputForm, Title, DivSelect, DivInput, Divs } from \"./styles.js\";\r\nimport ButtonJS from \"../components/Button/index.js\";\r\nimport InputJS from \"../components/Input/index.js\"\r\nimport { Redirect } from \"react-router-dom\";\r\nfunction FormMarcarLacuna() {\r\n\r\n  const criaCategoria = async (e) => {\r\n    e.preventDefault();\r\n    if (nomeCategoria === undefined || imagemCategoria === undefined) {\r\n      alert(\"Dados incompletos\");\r\n    } else {\r\n      const fd = new FormData();\r\n      fd.append(\"file\", imagemCategoria);\r\n      const response = await axios.post(\"http://localhost:3001/imagem\", fd);\r\n      const midia = \"https://drive.google.com/uc?id=\" + response.data;\r\n      axios\r\n        .post(\"http://localhost:3001/categoria\", {\r\n          nome: nomeCategoria,\r\n          midia,\r\n        })\r\n        .then((response) => {\r\n          alert(response);\r\n        })\r\n        .catch((error) => {\r\n          alert(error);\r\n        });\r\n\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n  let token = localStorage.getItem('tokenLibrasPTB');\r\n  const criaQuestao = async (e) => {\r\n    e.preventDefault();\r\n    if (categoriaQuestao === undefined || fraseQuestao == undefined || alternativaCerta === undefined || alternativaErrada1 === undefined || alternativaErrada2 === undefined || alternativaErrada3 === undefined || alternativaErrada4 === undefined) {\r\n      alert(\"Dados incompletos\");\r\n      console.log(categoriaQuestao, alternativaCerta)\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:3001/questaoMarcarLacuna\", {\r\n          token,\r\n          frase: fraseQuestao,\r\n          categoria: categoriaQuestao,\r\n          alternativaCerta,\r\n          alternativaErrada1,\r\n          alternativaErrada2,\r\n          alternativaErrada3,\r\n          alternativaErrada4\r\n        })\r\n        .then((response) => {\r\n          alert(response.data.msg);\r\n        })\r\n        .catch((error) => {\r\n          alert(error);\r\n        });\r\n\r\n    }\r\n  };\r\n  const [categorias, setCategorias] = useState([]);\r\n\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n\r\n\r\n  const [nomeCategoria, setNomeCategoria] = useState();\r\n  const [imagemCategoria, setImagemCategoria] = useState();\r\n  const [fraseQuestao, setFraseQuestao] = useState();\r\n  const [alternativaCerta, setAlternativaCerta] = useState();\r\n  const [alternativaErrada1, setAlternativaErrada1] = useState();\r\n  const [alternativaErrada2, setAlternativaErrada2] = useState();\r\n  const [alternativaErrada3, setAlternativaErrada3] = useState();\r\n  const [alternativaErrada4, setAlternativaErrada4] = useState();\r\n  const [categoriaQuestao, setCategoriaQuestao] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const getCategorias = async () => {\r\n      const categoriasDoBanco = await axios.get(\r\n        \"http://localhost:3001/categoria\"\r\n      );\r\n      setCategorias(categoriasDoBanco.data);\r\n    };\r\n    getCategorias();\r\n  }, []);\r\n  let header;\r\n  const [isLoggedIn, setIsLoggedIn] = useState()\r\n  useEffect(() => {\r\n    let token = localStorage.getItem('tokenLibrasPTB');\r\n    const getLogin = async () => {\r\n      const response = await axios.get(\r\n        \"http://localhost:3001/login\", { params: { token } }\r\n      );\r\n      setIsLoggedIn(response.data.msg);\r\n\r\n    };\r\n    try{\r\n      getLogin();\r\n    } catch(error){\r\n      setIsLoggedIn('notLoggedIn');\r\n    }\r\n  }, []);\r\n  if (isLoggedIn === 'loggedIn') {\r\n    header = <HeaderOne logged={true}></HeaderOne>\r\n  } else {\r\n    header = <HeaderOne logged={false}></HeaderOne>\r\n  }\r\n\r\n\r\n  if (isLoggedIn === 'loggedIn'  || isLoggedIn === undefined) {\r\n\r\n    return (\r\n      <>\r\n        <HeaderOne logged={true}></HeaderOne>\r\n        <Title fontSize={2.5} color={\"#000000\"}>\r\n          Marcar Lacuna com Alternativa\r\n        </Title>\r\n        <Title fontSize={1} color={\"#7A7A7A\"}>\r\n          Modelo em que se marca uma alternativa para preencher frase\r\n        </Title>\r\n        <br />\r\n        <Divs>\r\n          <DivInput>\r\n            <p>Categoria(s):</p>\r\n            <DivSelect>\r\n              {categorias.map((categoria) => {\r\n                return (\r\n                  <div>\r\n                    <input class=\"categoria\" key={categoria.nome} value={categoria.id} type='checkbox' />\r\n                    <label for=\"categoria\">{categoria.nome}</label>\r\n                  </div>\r\n                );\r\n              })}\r\n            </DivSelect>\r\n            <ButtonJS\r\n              onClick={openModal}\r\n              padding={\"2%\"}\r\n              width={\"30vw\"}\r\n              backgroundColor={\"#8ECAE6\"}\r\n              color={\"#000000\"}\r\n              borderRadius={\"5px\"}\r\n              name={\"Criar Categoria\"}\r\n            />\r\n          </DivInput>\r\n          <DivInputForm>\r\n            <div>\r\n              <label for=\"frase\">Frase</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"frase\"\r\n                color={\"rgba(142, 202, 230, 0.5)\"}\r\n                onChange={(v) => setFraseQuestao(v.target.value)}\r\n                value={fraseQuestao}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label for=\"correct\">Alternativa Correta</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"correct\"\r\n                color={\"rgba(144, 230, 142, 0.5)\"}\r\n                onChange={(v) => setAlternativaCerta(v.target.value)}\r\n                value={alternativaCerta}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label for=\"wrong1\">Alternativa Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong1\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada1(v.target.value)}\r\n                value={alternativaErrada1}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label for=\"wrong2\">Alternativa Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong2\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada2(v.target.value)}\r\n                value={alternativaErrada2}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label for=\"wrong3\">Alternativa Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong3\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada3(v.target.value)}\r\n                value={alternativaErrada3}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div>\r\n              <label for=\"wrong4\">Alternativa Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong4\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada4(v.target.value)}\r\n                value={alternativaErrada4}\r\n              />\r\n            </div>\r\n            <br />\r\n            <ButtonJS\r\n              onClick={criaQuestao}\r\n              padding={\"3%\"}\r\n              width={\"30vw\"}\r\n              backgroundColor={\"#219EBC\"}\r\n              color={\"#FFFF\"}\r\n              borderRadius={\"5px\"}\r\n              name={\"Criar Questão\"}\r\n            />\r\n          </DivInputForm>\r\n        </Divs>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          contentLabel=\"Example Modal\"\r\n          style={{\r\n            overlay: {\r\n              backgroundColor: \"#000;\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n            content: {\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              right: \"auto\",\r\n              bottom: \"auto\",\r\n              marginRight: \"-50%\",\r\n              backgroundColor: \"#000;\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n          }}\r\n        >\r\n          <h1>Criar Categoria</h1>\r\n          <form enctype=\"multipart/form-data\" method=\"POST\">\r\n            <label for=\"nome\">Nome da categoria:</label>\r\n            <br></br>\r\n            <InputJS\r\n              type=\"text\"\r\n              name=\"nomeCategoria\"\r\n              onChange={(v) => setNomeCategoria(v.target.value)}\r\n              value={nomeCategoria}\r\n              color={\"#EDEDEDED\"}\r\n              style={{ marginTop: \"5%\" }}\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <label for=\"url\">Logo da categoria:</label>\r\n            <br></br>\r\n            <InputJS\r\n              type=\"file\"\r\n              name=\"url\"\r\n              style={{ marginTop: \"3%\", marginBottom: \"5%\" }}\r\n              onChange={(v) => setImagemCategoria(v.target.files[0])}\r\n            ></InputJS>\r\n            <br></br>\r\n            <br></br>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <ButtonJS\r\n                onClick={criaCategoria}\r\n                padding={\"2%\"}\r\n                width={\"25vw\"}\r\n                backgroundColor={\"rgba(142, 202, 230, 0.5)\"}\r\n                borderRadius={\"10px\"}\r\n                name={\"Criar\"}\r\n              />\r\n              <ButtonJS\r\n                onClick={closeModal}\r\n                padding={\"2%\"}\r\n                width={\"25vw\"}\r\n                backgroundColor={\"rgba(229, 116, 116, 0.5)\"}\r\n                borderRadius={\"10px\"}\r\n                name={\"Cancelar\"}\r\n              />\r\n            </div>\r\n          </form>\r\n        </Modal>\r\n      </>\r\n    );\r\n  } else {\r\n    return (<div>{header}<Redirect to=\"/login\" />\r\n    </div>)\r\n  }\r\n}\r\nexport default FormMarcarLacuna;\r\n","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\splashScreen\\index.js",["149","150","151"],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\form\\form.js",["152","153","154","155","156","157","158","159","160"],"import React, { useState } from \"react\";\r\nimport \"./form.css\";\r\nimport HeaderOne from \"../header/index.js\";\r\nimport axios, {post} from 'axios'\r\nconst   token= localStorage.getItem(\"token\");\r\n\r\nconst categ= new Array()\r\nconst printAddress = async () => {\r\nconst a=  await axios.get('http://localhost:3001/categoria')\r\n\r\nfor(let i=0; i<a.data.length; i++){  \r\ncateg.push(a.data[i].nome)\r\n//document.querySelector('datalist').innerHTML+=`<option value=${categ[i]}></option>` \r\n}\r\n\r\ncallPrintAdress()\r\n};\r\n\r\nfunction callPrintAdress(){\r\n  for(let i=0; i< categ.length;i++){\r\n    if(document.querySelector('datalist')!=null){\r\n    document.querySelector('datalist').innerHTML+=`<option value=\"${categ[i]}\"></option>`;\r\n  }\r\n  \r\n}\r\n}\r\nprintAddress()\r\n\r\nfunction Home() {\r\n  let formData;\r\n  const [tipo, setTipo] = useState(\"\");\r\n  const [categoria, setCategoria] = useState(\"\")\r\n  const [imagem, setImagem] = useState(\"\");  \r\n  let x;\r\n\r\n\r\nlet categorias= new Array()\r\n\r\n  const enviaDados = async (e) => {\r\n    console.log('enviando');\r\n    e.preventDefault(); \r\n    \r\n    axios //faz chamada http\r\n    .post('http://localhost:3001/questao', \r\n    {\r\n     token, tipo,categoria   // nome: nome\r\n    })\r\n      .then((response) => {\r\n        \r\n      \r\n      })\r\n      .catch((error) => {\r\n        console.log('erro enviando formulario')\r\n        console.log(error);\r\n      });\r\n    }\r\n\r\n    const enviaImagem = async (e) => {\r\n      console.log(imagem);\r\n      e.preventDefault(); \r\n      \r\n      axios //faz chamada http\r\n      .post('http://localhost:3001/imagem', \r\n      {\r\n      file: imagem // nome: nome\r\n      })\r\n        .then((response) => {\r\n          \r\n        \r\n        })\r\n        .catch((error) => {\r\n          console.log('erro enviando formulario')\r\n          console.log(error);\r\n        });\r\n      }\r\n      /*\r\n    function onChange(e){\r\n   let files=e.target.files;\r\n  let reader= new FileReader();\r\n  reader.readAsDataURL(files[0]);    \r\n  reader.onload =(e) =>{\r\n    console.warn(e.target.result)\r\n    const url=\"http://localhost:3001/\"\r\n    formData={file: e.target.result}\r\n  //  var a = document.createElement(\"a\"); //Create <a>\r\n   // a.href = \"data:image/png;base64,\" +e.target.result //Image Base64 Goes here\r\n    //a.download = \"Image.png\"; //File name Here\r\n  //  a.click(); //Downloaded file\r\n  }\r\n\r\n  var link = document.createElement('a');\r\n*/\r\n  //link.href = e;\r\n//link.download = 'Download.jpg';\r\n//document.body.appendChild(link);\r\n//link.click();\r\n//document.body.removeChild(link);\r\n  \r\n  return (\r\n    <div>\r\n      <HeaderOne one=\"-\"></HeaderOne>\r\n      <br />\r\n      <br />\r\n      <div className=\"topic\">\r\n        <h1>Escolha o tipo de questão</h1>\r\n        <br />\r\n        <div>\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"AC\"\r\n            onChange={(v) => setTipo('AC')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(0)}\r\n          />{\" \"}\r\n          Associar Colunas\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"OP\"\r\n            onChange={(v) => setTipo('OP')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(1)}\r\n          />\r\n          Ordenar palavras de uma frase\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"DPV\"\r\n            onChange={(v) => setTipo('DPV')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(2)}\r\n          />\r\n          Digitar palavra da imagem\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"OP\"\r\n            onChange={(v) => setTipo('OP')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(3)}\r\n          />\r\n          Digitar palavra do vídeo\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"DPF\"\r\n            onChange={(v) => setTipo('DPF')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(4)}\r\n          />\r\n          Digitar frase de um vídeo em libras\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"PLFD\"\r\n            onChange={(v) => setTipo('PLFD')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(5)}\r\n          />\r\n          Preencher lacuna da frase digitando\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"PLFA\"\r\n            onChange={(v) => setTipo('PLFA')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(6)}\r\n          />\r\n          Preencher lacuna da frase com alternativa\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"MAPV\"\r\n            onChange={(v) => setTipo('MAPV')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(7)}\r\n          />\r\n          Marcar alternativa da palavra do vídeo\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"MAPI\"\r\n            onChange={(v) => setTipo('MAPI')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(8)}\r\n          />\r\n          Marcar alternativa da palavra da imagem\r\n          <br />\r\n          <input\r\n            type=\"radio\"\r\n            className=\"Tipo\"\r\n            name=\"MAF\"\r\n            onChange={(v) => setTipo('MAF')}\r\n            value={tipo}\r\n            onClick={() => desmarcar(9)}\r\n          />\r\n          Marcar alternativa da frase\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <div className=\"topic3\">\r\n        <h1>Selecione a categoria</h1>\r\n        <br />\r\n        </div>\r\n        <input list=\"datalist\"/>\r\n\r\n\r\n        <datalist id=\"datalist\">\r\n  \r\n  </datalist>\r\n  \r\n      \r\n      <br />\r\n      <br />\r\n      <div className=\"topic3\">\r\n        <div className=\"topic3\" id=\"frase\">\r\n          <h1>Frase</h1>\r\n\r\n          <input type=\"text\" name=\"frase\" placeholder=\"Frase\" />\r\n        </div>\r\n\r\n        <div className=\"topic3\" id=\"colunas\">\r\n          <h1>Colunas</h1>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna2\"\r\n            class=\"coluna\"\r\n            placeholder=\"Alternativa 2\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna3\"\r\n            class=\"coluna\"\r\n            placeholder=\"Alternativa 3\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna4\"\r\n            class=\"coluna\"\r\n            placeholder=\"Alternativa 4\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna5\"\r\n            class=\"coluna\"\r\n            placeholder=\"Alternativa 5\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna6\"\r\n            class=\"coluna\"\r\n            placeholder=\"Par da alternativa 1\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna7\"\r\n            class=\"coluna\"\r\n            placeholder=\"Par da alternativa 2\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna8\"\r\n            class=\"coluna\"\r\n            placeholder=\"Par da alternativa 3\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna9\"\r\n            class=\"coluna\"\r\n            placeholder=\"Par da alternativa 4\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"coluna10\"\r\n            class=\"coluna\"\r\n            placeholder=\"Par da alternativa 5\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"topic3\" id=\"alternativas\">\r\n          <h1>Alternativas</h1>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            name=\"altcerta\"\r\n            id=\"altcerta\"\r\n            class=\"altcerta\"\r\n            placeholder=\"Alternativa correta\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"alterrada1\"\r\n            id=\"alterrada1\"\r\n            class=\"alterrada\"\r\n            placeholder=\"Alternativa errada\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"alterrada2\"\r\n            id=\"alterrada2\"\r\n            class=\"alterrada\"\r\n            placeholder=\"Alternativa errada\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"alterrada3\"\r\n            id=\"alterrada3\"\r\n            class=\"alterrada\"\r\n            placeholder=\"Alternativa errada\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"alterrada4\"\r\n            id=\"alterrada4\"\r\n            class=\"alterrada\"\r\n            placeholder=\"Alternativa errada\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"topic3\" id=\"resposta\">\r\n          <h1>Resposta correta</h1>\r\n\r\n          <input type=\"text\" name=\"resposta\" placeholder=\"resposta\" />\r\n        </div>\r\n\r\n        <div className=\"topic3\" id='url'>\r\n            <h1>Imagem/vídeo</h1>\r\n            <input type='file' name='url' onChange={(v) => setImagem(v)}></input>\r\n            <button onClick={enviaImagem} value=\"Enviar\">\r\n          Enviar{\" \"}\r\n          </button>\r\n        </div>\r\n        <br/>\r\n        <br/>\r\n        <button onClick={enviaDados} value=\"Enviar\">\r\n          Enviar{\" \"}\r\n          </button>\r\n      </div>\r\n     \r\n      \r\n    </div>\r\n  );\r\n  function desmarcar(num) {\r\n    let frase = document.getElementById(\"frase\");\r\n    let alternativas = document.getElementById(\"alternativas\");\r\n    let colunas = document.getElementById(\"colunas\");\r\n    var resposta= document.getElementById(\"resposta\");\r\n    \r\n    let url = document.getElementById(\"url\");\r\n   \r\n    //desmarca todos os botoes menos o num\r\n    let tipo;\r\n    for (let i = 0; i < 10; i++) {\r\n      if (i !== num) {\r\n        tipo = document.getElementsByClassName(\"Tipo\")[i];\r\n        tipo.checked = false;\r\n      }\r\n    }\r\n    switch (num) {\r\n      case 0:\r\n        frase.style.display = \"none\";\r\n        alternativas.style.display = \"none\";\r\n        colunas.style.display = \"unset\";\r\n        resposta.style.display=\"none\"\r\n        url.style.display = \"none\"\r\n        break;\r\n      case 1:\r\n\r\n      case \"Papayas\":\r\n        console.log(\"Mangoes and papayas are $2.79 a pound.\");\r\n        // expected output: \"Mangoes and papayas are $2.79 a pound.\"\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarLacuna\\index.js",["161","162","163"],"import React, { useState, useEffect } from \"react\";\r\nimport HeaderOne from \"../header/index.js\";\r\nimport axios from \"axios\";\r\nimport { DivInputForm, Title, DivSelect, DivInput, Divs } from \"./styles.js\";\r\nimport ButtonJS from \"../components/Button/index.js\";\r\nimport InputJS from \"../components/Input/index.js\";\r\nimport Modal from \"react-modal\";\r\nimport { Redirect } from \"react-router-dom\";\r\n/*\r\nCREATE TABLE preencherdigitando(\r\n        questao INTEGER NOT NULL,\r\n      frase VARCHAR(300) NOT NULL,\r\n      resposta varchar(40),\r\n      FOREIGN KEY (questao) REFERENCES questao(id)\r\n)\r\n*/\r\nfunction FormDigitarLacuna() {\r\n  const [nomeCategoria, setNomeCategoria] = useState();\r\n  const [imagemCategoria, setImagemCategoria] = useState();\r\n  const [fraseQuestao, setFraseQuestao] = useState();\r\n  const [palavraQuestao, setPalavraQuestao] = useState();\r\n  const [categoriaQuestao, setCategoriaQuestao] = useState(1);\r\n  const token = localStorage.getItem(\"tokenLibrasPTB\");\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n  const criaCategoria = async (e) => {\r\n    e.preventDefault();\r\n    if (nomeCategoria === undefined || imagemCategoria === undefined) {\r\n      alert(\"Dados incompletos\");\r\n    } else {\r\n      const fd = new FormData();\r\n      fd.append(\"file\", imagemCategoria);\r\n      const response = await axios.post(\"http://localhost:3001/imagem\", fd);\r\n      const midia = \"https://drive.google.com/uc?id=\" + response.data;\r\n      axios\r\n        .post(\"http://localhost:3001/categoria\", {\r\n          nome: nomeCategoria,\r\n          midia,\r\n        })\r\n        .then((response) => {\r\n          alert('Categoria criada com sucesso');\r\n          \r\n        })\r\n        .catch((error) => {\r\n          alert(error);\r\n        });\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n  const criaQuestao = async (e) => {\r\n    e.preventDefault();\r\n    if (categoriaQuestao === undefined || palavraQuestao === undefined || fraseQuestao === undefined) {\r\n      console.log(categoriaQuestao, palavraQuestao, fraseQuestao)\r\n      alert('Dados incompletos')\r\n    } else {\r\n      const token = localStorage.getItem(\"tokenLibrasPTB\");\r\n      axios\r\n        .post(\"http://localhost:3001/questaoDigitarLacuna\", {\r\n          token,\r\n          frase: fraseQuestao,\r\n          resposta: palavraQuestao,\r\n          categoria: categoriaQuestao\r\n        })\r\n        .then((response) => {\r\n          alert('Questao criada com sucesso');\r\n        })\r\n        .catch((error) => {\r\n          alert(error);\r\n        });\r\n    }\r\n  };\r\n  const [categorias, setCategorias] = useState([]);\r\n  let header;\r\n  const [isLoggedIn, setIsLoggedIn] = useState()\r\n  useEffect(() => {\r\n    let token = localStorage.getItem('tokenLibrasPTB');\r\n    const getLogin = async () => {\r\n      const response = await axios.get(\r\n        \"http://localhost:3001/login\", { params: { token } }\r\n      );\r\n      setIsLoggedIn(response.data.msg);\r\n      console.log(isLoggedIn)\r\n    };\r\n    try{\r\n      getLogin();\r\n    } catch(error){\r\n      setIsLoggedIn('notLoggedIn');\r\n    }\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCategorias = async () => {\r\n      const categoriasDoBanco = await axios.get(\r\n        \"http://localhost:3001/categoria\"\r\n      );\r\n      setCategorias(categoriasDoBanco.data);\r\n    };\r\n    getCategorias();\r\n  }, []);\r\n  if (isLoggedIn === 'loggedIn') {\r\n    header = <HeaderOne logged={true}></HeaderOne>\r\n  } else {\r\n    header = <HeaderOne logged={false}></HeaderOne>\r\n  }\r\n\r\n  if (isLoggedIn === 'loggedIn'  || isLoggedIn === undefined) {\r\n    return (\r\n      <>\r\n        <HeaderOne logged={true}></HeaderOne>\r\n        <Title fontSize={2.5} color={\"#000000\"}>\r\n          Digitar lacuna\r\n        </Title>\r\n        <Title fontSize={1} color={\"#7A7A7A\"}>\r\n          Modelo em que se digita uma palavra para preencher uma frase\r\n        </Title>\r\n        <br />\r\n        <Divs>\r\n          <DivInput>\r\n            <p>Categoria(s):</p>\r\n            <DivSelect>\r\n              {categorias.map((categoria) => {\r\n                return (\r\n                  <div>\r\n                    <input class=\"categoria\" key={categoria.nome} value={categoria.id} type='checkbox' />\r\n                    <label for=\"categoria\">{categoria.nome}</label>\r\n                  </div>\r\n                );\r\n              })}\r\n            </DivSelect>\r\n            <ButtonJS\r\n              onClick={openModal}\r\n              padding={\"2%\"}\r\n              width={\"30vw\"}\r\n              backgroundColor={\"#8ECAE6\"}\r\n              color={\"#000000\"}\r\n              borderRadius={\"5px\"}\r\n              name={\"Criar Categoria\"}\r\n            />\r\n          </DivInput>\r\n          <DivInputForm>\r\n            <div>\r\n              <label for=\"frase\">Frase</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"frase\"\r\n                color={\"rgba(142, 202, 230, 0.5)\"}\r\n                onChange={(v) => setFraseQuestao(v.target.value)}\r\n                value={fraseQuestao}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"lacuna\">Palavra que será a lacuna</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"frase\"\r\n                color={\"rgba(142, 202, 230, 0.5)\"}\r\n                onChange={(v) => setPalavraQuestao(v.target.value)}\r\n                value={palavraQuestao}\r\n              />\r\n            </div>\r\n            <br />\r\n            <ButtonJS\r\n              onClick={criaQuestao}\r\n              padding={\"3%\"}\r\n              width={\"30vw\"}\r\n              backgroundColor={\"#219EBC\"}\r\n              color={\"#FFFF\"}\r\n              borderRadius={\"5px\"}\r\n              name={\"Criar Questão\"}\r\n            />\r\n          </DivInputForm>\r\n        </Divs>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          contentLabel=\"Example Modal\"\r\n          style={{\r\n            overlay: {\r\n              backgroundColor: \"#000;\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n            content: {\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              right: \"auto\",\r\n              bottom: \"auto\",\r\n              marginRight: \"-50%\",\r\n              backgroundColor: \"#000;\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n          }}\r\n        >\r\n          <h1>Criar Categoria</h1>\r\n          <form enctype=\"multipart/form-data\" method=\"POST\">\r\n            <label for=\"nome\">Nome da categoria:</label>\r\n            <br></br>\r\n            <InputJS\r\n              type=\"text\"\r\n              name=\"nomeCategoria\"\r\n              onChange={(v) => setNomeCategoria(v.target.value)}\r\n              value={nomeCategoria}\r\n              color={\"#EDEDEDED\"}\r\n              style={{ marginTop: \"5%\" }}\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <label for=\"url\">Logo da categoria:</label>\r\n            <br></br>\r\n            <InputJS\r\n              type=\"file\"\r\n              name=\"url\"\r\n              //value={imagemCategoria}\r\n              // style={{ marginTop: \"3%\", marginBottom: \"5%\" }}\r\n              onChange={(v) => setImagemCategoria(v.target.files[0])}\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <ButtonJS\r\n                onClick={criaCategoria}\r\n                padding={\"2%\"}\r\n                width={\"25vw\"}\r\n                backgroundColor={\"rgba(142, 202, 230, 0.5)\"}\r\n                borderRadius={\"10px\"}\r\n                name={\"Criar\"}\r\n              />\r\n              <ButtonJS\r\n                onClick={closeModal}\r\n                padding={\"2%\"}\r\n                width={\"25vw\"}\r\n                backgroundColor={\"rgba(229, 116, 116, 0.5)\"}\r\n                borderRadius={\"10px\"}\r\n                name={\"Cancelar\"}\r\n              />\r\n            </div>\r\n          </form>\r\n        </Modal>\r\n      </>\r\n    );\r\n  } else {\r\n    return (<div>{header}<Redirect to=\"/login\" />\r\n    </div>)\r\n  }\r\n\r\n}\r\nexport default FormDigitarLacuna;\r\n","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAssociarColunas\\index.js",["164"],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\form\\formimg.js",["165","166","167"],"import React, { useState } from \"react\";\r\nimport axios, {post} from 'axios'\r\n\r\nimport Dropzone from \"react-dropzone\";\r\n\r\nexport default function App() {\r\n  const [file, setFile] = useState();\r\n/*\r\n  const enviaDados = async (e) => {\r\n    console.log('enviando');\r\n    e.preventDefault(); \r\n    const requestConfig = {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    }\r\n    axios.post('http://localhost:3001/imagem', {file: file}, requestConfig);\r\n   \r\n    }\r\n    \r\n    import axios from \"axios\";\r\n*/\r\n\r\n/*\r\nconst enviaDados = async (e) => {\r\n  e.preventDefault()\r\n  const fd= new FormData()\r\n  fd.append('file', file,'file')\r\n  var options = {\r\n    method: 'POST',\r\n    url: 'http://localhost:3003/imagem',\r\n    headers: {'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'},\r\n    data: '-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"image (1).jpg\"\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n\\r\\n-----011000010111000001101001--\\r\\n'\r\n  };\r\naxios.post('http://localhost:3001/imagem', fd, options).then(res =>{\r\n  console.log(res)\r\n})\r\n}\r\n*/\r\n\r\n/*\r\n\r\n\r\n  var options = {\r\n    method: 'POST',\r\n    url: 'http://localhost:3003/imagem',\r\n    headers: {'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'},\r\n    data: '-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"image (1).jpg\"\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n\\r\\n-----011000010111000001101001--\\r\\n'\r\n  };\r\n  \r\n  axios.request(options).then(function (response) {\r\n    console.log(response.data);\r\n  }).catch(function (error) {\r\n    console.error(error);\r\n  });\r\n*/\r\nvar axios = require(\"axios\").default;\r\nasync function enviaDados(e){\r\n\r\n  e.preventDefault()\r\n  const fd = new FormData()\r\n  fd.append('file', file)\r\n  console.log(file)\r\n  const response = await axios.post('http://localhost:3001/imagem', fd)\r\nalert(response.status);\r\n\r\n\r\n}\r\n\r\n/*\r\nconst response = await fetch('http://localhost:3001/imagem',{\r\n  method: 'POST',\r\n  headers: {'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'},\r\n  body: form\r\n})\r\n*/\r\n\r\n/*\r\nvar options = {\r\n  method: 'POST',\r\n  url: 'http://localhost:3001/imagem',\r\n  headers: {'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'},\r\n  data: '-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"image (1).jpg\"\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n\\r\\n-----011000010111000001101001--\\r\\n'\r\n};\r\n\r\naxios.request(options).then(function (response) {\r\n  console.log(response.data);\r\n}).catch(function (error) {\r\n  console.error(error);\r\n});\r\n}\r\n*/\r\n/*\r\n<form  method=\"post\" enctype=\"multipart/form-data\">\r\n  <input type=\"file\" name=\"file\" id=\"file\" onChange={(v)=> setFile(v.target.files[0])} />\r\n  <input type=\"submit\" value=\"submit\" onClick={enviaDados}/>\r\n</form>\r\n*/\r\n\r\n\r\n    return (\r\n  \r\n <form enctype=\"multipart/form-data\" method=\"POST\"> \r\n <input type=\"file\" name=\"myImage\" accept=\"image/*\"  onChange={(v)=> setFile('')}/>\r\n <input type=\"submit\" value=\"Upload Photo\" onClick={enviaDados} />\r\n</form>\r\n     );\r\n    }\r\n","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\login\\login.js",["168","169","170"],"import React, { useState, useEffect } from \"react\";\r\nimport { unmountComponentAtNode, render } from \"react-dom\";\r\nimport HeaderOne from \"../header/index.js\";\r\nimport { BackBanner } from \"./styles\";\r\nimport { LoginForm } from './styles';\r\n\r\nconst axios = require(\"axios\");\r\n\r\nlet token = \"\";\r\nfunction Login() {\r\n  let [email, setEmail] = useState(\"\");\r\n  let [senha, setSenha] = useState(\"\");\r\n  const enviaDados = async (e) => {\r\n    e.preventDefault();\r\n\r\n    axios\r\n      .post(\"http://localhost:3001/login\", {\r\n        email: email,\r\n        senha: senha,\r\n      })\r\n      .then(\r\n        (response) => {\r\n          token = response.data.token;\r\n          let emailLogado = response.data.email;\r\n          console.log(token);\r\n          localStorage.setItem(\"tokenLibrasPTB\", token);\r\n          localStorage.setItem(\"user\", emailLogado);\r\n          alert(\"Autenticado\");\r\n          window.location.href = 'http://localhost:3000/home';\r\n        },\r\n        (error) => {\r\n          alert(\"Não autenticado, há erros na senha ou no email\");\r\n          console.log(error);\r\n        }\r\n      );\r\n  };\r\nlet header;\r\n  const [isLoggedIn, setIsLoggedIn]= useState()\r\n\r\n  useEffect(() => {\r\n    let token = localStorage.getItem('tokenLibrasPTB');\r\n    const getLogin = async () => {\r\n      const response = await axios.get(\r\n        \"http://localhost:3001/login\", { params: { token } }\r\n      );\r\n      setIsLoggedIn(response.data.msg);\r\n  \r\n    };\r\n    getLogin();\r\n  }, []);\r\n  if (isLoggedIn === 'loggedIn') {\r\n   header = <HeaderOne logged={true}></HeaderOne>\r\n    } else {\r\n  header = <HeaderOne logged={false}></HeaderOne>\r\n    }\r\n  return (\r\n    <>\r\n      {header}\r\n      <BackBanner>\r\n        <LoginForm>\r\n          <input\r\n            type=\"text\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"E-mail\"\r\n            onChange={(v) => setEmail(v.target.value)}\r\n            value={email}\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            id=\"senha\"\r\n            name=\"senha\"\r\n            placeholder=\"Senha\"\r\n            onChange={(v) => setSenha(v.target.value)}\r\n            value={senha}\r\n          />\r\n          <button\r\n            onClick={enviaDados}\r\n            value=\"Enviar\"\r\n            className=\"forms-button\"\r\n            id=\"buttonLogin\"\r\n          >\r\n            Logar{\" \"}\r\n          </button>\r\n        </LoginForm>\r\n\r\n        <img src=\"https://drive.google.com/uc?id=1JJYSNQ5xjSx8QYRRDDd7OtoiN1W7_9yS\" />\r\n      </BackBanner>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarPalavra\\index.js",["171","172","173","174"],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaCorreta\\index.js",["175","176","177"],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formOrdenarFrase\\index.js",["178","179","180","181"],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formMarcarLacuna\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarLacuna\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAssociarColunas\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaCorreta\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\header\\index.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Input\\index.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Button\\index.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\ThreeDotsWave\\index.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\splashScreen\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formDigitarPalavra\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\login\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formOrdenarFrase\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\footer\\index.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Input\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\header\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Button\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Card\\index.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\footer\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\components\\Card\\styles.js",[],"C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaLacuna\\index.js",["182"],"import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport axios from \"axios\";\r\nimport HeaderOne from \"../header/index.js\";\r\nimport { DivInputForm, Title, DivSelect, DivInput, Divs } from \"./styles.js\";\r\nimport ButtonJS from \"../components/Button/index.js\";\r\nimport InputJS from \"../components/Input/index.js\"\r\nimport { Redirect } from \"react-router-dom\";\r\nfunction FormAlternativaLacuna() {\r\n  const criaCategoria = async (e) => {\r\n    e.preventDefault();\r\n    if (nomeCategoria === undefined || imagemCategoria === undefined) {\r\n      alert(\"Dados incompletos\");\r\n    } else {\r\n      const fd = new FormData();\r\n      fd.append(\"file\", imagemCategoria);\r\n      const response = await axios.post(\"http://localhost:3001/imagem\", fd);\r\n      const midia = \"https://drive.google.com/uc?id=\" + response.data;\r\n      axios\r\n        .post(\"http://localhost:3001/categoria\", {\r\n          nome: nomeCategoria,\r\n          midia,\r\n        })\r\n        .then((response) => {\r\n          alert(response);\r\n          \r\n        })\r\n        .catch((error) => {\r\n          alert(error);\r\n        });\r\n\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n  let token = localStorage.getItem('tokenLibrasPTB');\r\n  const criaQuestao = async (e) => {\r\n    e.preventDefault();\r\n    if (categoriaQuestao === undefined || alternativaCerta === undefined || alternativaErrada1 === undefined || alternativaErrada2 === undefined || alternativaErrada3 === undefined || alternativaErrada4 === undefined) {\r\n      alert(\"Dados incompletos\");\r\n      console.log(categoriaQuestao, alternativaCerta)\r\n    } else {\r\n      axios\r\n        .post(\"http://localhost:3001/questaoFraseCorreta\", {\r\n          token,\r\n          categoria: categoriaQuestao,\r\n          alternativaCerta,\r\n          alternativaErrada1,\r\n          alternativaErrada2,\r\n          alternativaErrada3,\r\n          alternativaErrada4\r\n        })\r\n        .then((response) => {\r\n          alert(response.data.msg);\r\n        })\r\n        .catch((error) => {\r\n          alert(error);\r\n        });\r\n\r\n    }\r\n  };\r\n  const [categorias, setCategorias] = useState([]);\r\n\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n  const [nomeCategoria, setNomeCategoria] = useState();\r\n  const [imagemCategoria, setImagemCategoria] = useState();\r\n  const [alternativaCerta, setAlternativaCerta] = useState();\r\n  const [alternativaErrada1, setAlternativaErrada1] = useState();\r\n  const [alternativaErrada2, setAlternativaErrada2] = useState();\r\n  const [alternativaErrada3, setAlternativaErrada3] = useState();\r\n  const [alternativaErrada4, setAlternativaErrada4] = useState();\r\n  const [categoriaQuestao, setCategoriaQuestao] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const getCategorias = async () => {\r\n      const categoriasDoBanco = await axios.get(\r\n        \"http://localhost:3001/categoria\"\r\n      );\r\n      setCategorias(categoriasDoBanco.data);\r\n    };\r\n    getCategorias();\r\n  }, []);\r\n  let header;\r\n  const [isLoggedIn, setIsLoggedIn] = useState()\r\n  useEffect(() => {\r\n    let token = localStorage.getItem('tokenLibrasPTB');\r\n    const getLogin = async () => {\r\n      const response = await axios.get(\r\n        \"http://localhost:3001/login\", { params: { token } }\r\n      );\r\n      setIsLoggedIn(response.data.msg);\r\n\r\n    };\r\n    try{\r\n      getLogin();\r\n    } catch(error){\r\n      setIsLoggedIn('notLoggedIn');\r\n    }\r\n  }, []);\r\n  if (isLoggedIn === 'loggedIn') {\r\n    header = <HeaderOne logged={true}></HeaderOne>\r\n  } else {\r\n    header = <HeaderOne logged={false}></HeaderOne>\r\n  }\r\n  if (isLoggedIn === 'loggedIn'  || isLoggedIn === undefined) {\r\n\r\n    return (\r\n      <>\r\n        <HeaderOne logged={true}></HeaderOne>\r\n        <Title fontSize={2.5} color={\"#000000\"}>\r\n          Marcar Lacuna com Alternativa\r\n        </Title>\r\n        <Title fontSize={1} color={\"#7A7A7A\"}>\r\n          Modelo em que se marca uma alternativa para preencher frase\r\n        </Title>\r\n        <br />\r\n        <Divs>\r\n          <DivInput>\r\n            <p>Categoria(s):</p>\r\n            <DivSelect>\r\n              {categorias.map((categoria) => {\r\n                return (\r\n                  <div>\r\n                    <input\r\n                      class=\"categoria\"\r\n                      key={categoria.nome}\r\n                      value={categoria.id}\r\n                      type=\"checkbox\"\r\n                    />\r\n                    <label for=\"categoria\">{categoria.nome}</label>\r\n                  </div>\r\n                );\r\n              })}\r\n            </DivSelect>\r\n            <ButtonJS\r\n              onClick={openModal}\r\n              padding={\"2%\"}\r\n              width={\"30vw\"}\r\n              backgroundColor={\"#8ECAE6\"}\r\n              color={\"#000000\"}\r\n              borderRadius={\"5px\"}\r\n              name={\"Criar Categoria\"}\r\n            />\r\n          </DivInput>\r\n          <DivInputForm>\r\n            <div>\r\n              <label for=\"correct\">Frase Correta</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"correct\"\r\n                color={\"rgba(144, 230, 142, 0.5)\"}\r\n                onChange={(v) => setAlternativaCerta(v.target.value)}\r\n                value={alternativaCerta}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"wrong1\">Frase Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong1\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada1(v.target.value)}\r\n                value={alternativaErrada1}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"wrong2\">Frase Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong2\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada2(v.target.value)}\r\n                value={alternativaErrada2}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"wrong3\">Frase Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong3\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada3(v.target.value)}\r\n                value={alternativaErrada3}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"wrong4\">Frase Errada</label>\r\n              <InputJS\r\n                id=\"inputfrase\"\r\n                type=\"text\"\r\n                name=\"wrong4\"\r\n                color={\"rgba(252, 65, 65, 0.5)\"}\r\n                onChange={(v) => setAlternativaErrada4(v.target.value)}\r\n                value={alternativaErrada4}\r\n              />\r\n            </div>\r\n            <br />\r\n            <ButtonJS\r\n              onClick={criaQuestao}\r\n              padding={\"3%\"}\r\n              width={\"30vw\"}\r\n              backgroundColor={\"#219EBC\"}\r\n              color={\"#FFFF\"}\r\n              borderRadius={\"5px\"}\r\n              name={\"Criar Questão\"}\r\n            />\r\n          </DivInputForm>\r\n        </Divs>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          contentLabel=\"Example Modal\"\r\n          style={{\r\n            overlay: {\r\n              backgroundColor: \"#000;\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n            content: {\r\n              top: \"50%\",\r\n              left: \"50%\",\r\n              right: \"auto\",\r\n              bottom: \"auto\",\r\n              marginRight: \"-50%\",\r\n              backgroundColor: \"#000;\",\r\n              transform: \"translate(-50%, -50%)\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n          }}\r\n        >\r\n          <h1>Criar Categoria</h1>\r\n          <form enctype=\"multipart/form-data\" method=\"POST\">\r\n            <label for=\"nome\">Nome da categoria:</label>\r\n            <br></br>\r\n            <InputJS\r\n              type=\"text\"\r\n              name=\"nomeCategoria\"\r\n              onChange={(v) => setNomeCategoria(v.target.value)}\r\n              value={nomeCategoria}\r\n              color={\"#EDEDEDED\"}\r\n              style={{ marginTop: \"5%\" }}\r\n            />\r\n            <br></br>\r\n            <br></br>\r\n            <label for=\"url\">Logo da categoria:</label>\r\n            <br></br>\r\n            <InputJS\r\n              type=\"file\"\r\n              name=\"url\"\r\n              style={{ marginTop: \"3%\", marginBottom: \"5%\" }}\r\n              onChange={(v) => setImagemCategoria(v.target.files[0])}\r\n            ></InputJS>\r\n            <br></br>\r\n            <br></br>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <ButtonJS\r\n                onClick={criaCategoria}\r\n                padding={\"2%\"}\r\n                width={\"25vw\"}\r\n                backgroundColor={\"rgba(142, 202, 230, 0.5)\"}\r\n                borderRadius={\"10px\"}\r\n                name={\"Criar\"}\r\n              />\r\n              <ButtonJS\r\n                onClick={closeModal}\r\n                padding={\"2%\"}\r\n                width={\"25vw\"}\r\n                backgroundColor={\"rgba(229, 116, 116, 0.5)\"}\r\n                borderRadius={\"10px\"}\r\n                name={\"Cancelar\"}\r\n              />\r\n            </div>\r\n          </form>\r\n        </Modal>\r\n      </>\r\n    );\r\n  } else {\r\n    return (<div>{header}<Redirect to=\"/login\" />\r\n  </div>)\r\n  }\r\n}\r\nexport default FormAlternativaLacuna;\r\n","C:\\Users\\Adriele\\Downloads\\librasptb-1\\librasptbfrontend\\src\\formAlternativaLacuna\\styles.js",[],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":38,"column":56,"nodeType":"189","messageId":"190","endLine":38,"endColumn":58},{"ruleId":"191","severity":1,"message":"192","line":81,"column":28,"nodeType":"193","messageId":"194","endLine":81,"endColumn":47},{"ruleId":"191","severity":1,"message":"195","line":6,"column":10,"nodeType":"193","messageId":"194","endLine":6,"endColumn":18},{"ruleId":"196","severity":1,"message":"197","line":67,"column":4,"nodeType":"198","endLine":67,"endColumn":6,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":81,"column":9,"nodeType":"202","endLine":81,"endColumn":87},{"ruleId":"191","severity":1,"message":"203","line":4,"column":16,"nodeType":"193","messageId":"194","endLine":4,"endColumn":20},{"ruleId":"204","severity":1,"message":"205","line":7,"column":14,"nodeType":"206","messageId":"207","endLine":7,"endColumn":25},{"ruleId":"191","severity":1,"message":"208","line":30,"column":7,"nodeType":"193","messageId":"194","endLine":30,"endColumn":15},{"ruleId":"191","severity":1,"message":"209","line":32,"column":21,"nodeType":"193","messageId":"194","endLine":32,"endColumn":33},{"ruleId":"191","severity":1,"message":"210","line":34,"column":7,"nodeType":"193","messageId":"194","endLine":34,"endColumn":8},{"ruleId":"191","severity":1,"message":"211","line":37,"column":5,"nodeType":"193","messageId":"194","endLine":37,"endColumn":15},{"ruleId":"204","severity":1,"message":"205","line":37,"column":17,"nodeType":"206","messageId":"207","endLine":37,"endColumn":28},{"ruleId":"212","severity":1,"message":"213","line":370,"column":5,"nodeType":"214","messageId":"215","endLine":384,"endColumn":6},{"ruleId":"216","severity":1,"message":"217","line":380,"column":7,"nodeType":"218","messageId":"219","endLine":383,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":22,"column":28,"nodeType":"193","messageId":"194","endLine":22,"endColumn":47},{"ruleId":"191","severity":1,"message":"220","line":23,"column":9,"nodeType":"193","messageId":"194","endLine":23,"endColumn":14},{"ruleId":"196","severity":1,"message":"197","line":96,"column":6,"nodeType":"198","endLine":96,"endColumn":8,"suggestions":"221"},{"ruleId":"196","severity":1,"message":"222","line":127,"column":6,"nodeType":"198","endLine":127,"endColumn":25,"suggestions":"223"},{"ruleId":"191","severity":1,"message":"224","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":13},{"ruleId":"191","severity":1,"message":"203","line":2,"column":16,"nodeType":"193","messageId":"194","endLine":2,"endColumn":20},{"ruleId":"191","severity":1,"message":"225","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":16},{"ruleId":"191","severity":1,"message":"226","line":2,"column":10,"nodeType":"193","messageId":"194","endLine":2,"endColumn":32},{"ruleId":"191","severity":1,"message":"227","line":2,"column":34,"nodeType":"193","messageId":"194","endLine":2,"endColumn":40},{"ruleId":"200","severity":1,"message":"201","line":88,"column":9,"nodeType":"202","endLine":88,"endColumn":87},{"ruleId":"191","severity":1,"message":"203","line":4,"column":17,"nodeType":"193","messageId":"194","endLine":4,"endColumn":21},{"ruleId":"187","severity":1,"message":"188","line":50,"column":84,"nodeType":"189","messageId":"190","endLine":50,"endColumn":86},{"ruleId":"196","severity":1,"message":"228","line":89,"column":6,"nodeType":"198","endLine":89,"endColumn":25,"suggestions":"229"},{"ruleId":"196","severity":1,"message":"197","line":143,"column":6,"nodeType":"198","endLine":143,"endColumn":8,"suggestions":"230"},{"ruleId":"187","severity":1,"message":"188","line":109,"column":54,"nodeType":"189","messageId":"190","endLine":109,"endColumn":56},{"ruleId":"196","severity":1,"message":"231","line":138,"column":6,"nodeType":"198","endLine":138,"endColumn":25,"suggestions":"232"},{"ruleId":"196","severity":1,"message":"197","line":164,"column":6,"nodeType":"198","endLine":164,"endColumn":8,"suggestions":"233"},{"ruleId":"187","severity":1,"message":"188","line":53,"column":55,"nodeType":"189","messageId":"190","endLine":53,"endColumn":57},{"ruleId":"196","severity":1,"message":"234","line":96,"column":12,"nodeType":"198","endLine":96,"endColumn":31,"suggestions":"235"},{"ruleId":"191","severity":1,"message":"192","line":101,"column":28,"nodeType":"193","messageId":"194","endLine":101,"endColumn":47},{"ruleId":"196","severity":1,"message":"197","line":129,"column":6,"nodeType":"198","endLine":129,"endColumn":8,"suggestions":"236"},{"ruleId":"191","severity":1,"message":"192","line":77,"column":28,"nodeType":"193","messageId":"194","endLine":77,"endColumn":47},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'setCategoriaQuestao' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["239"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'post' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'formData' is defined but never used.","'setCategoria' is assigned a value but never used.","'x' is defined but never used.","'categorias' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'token' is assigned a value but never used.",["240"],"React Hook useEffect has missing dependencies: 'alternativa1', 'alternativa2', 'alternativa3', 'alternativa4', 'alternativa5', 'imagem1', 'imagem2', 'imagem3', 'imagem4', and 'imagem5'. Either include them or remove the dependency array.",["241"],"'axios' is defined but never used.","'Dropzone' is defined but never used.","'unmountComponentAtNode' is defined but never used.","'render' is defined but never used.","React Hook useEffect has missing dependencies: 'imagemQuestao' and 'palavraQuestao'. Either include them or remove the dependency array.",["242"],["243"],"React Hook useEffect has missing dependencies: 'alternativaCerta', 'alternativaErrada1', 'alternativaErrada2', 'alternativaErrada3', 'alternativaErrada4', 'imagemQuestao', and 'token'. Either include them or remove the dependency array.",["244"],["245"],"React Hook useEffect has missing dependencies: 'fraseQuestao' and 'token'. Either include them or remove the dependency array.",["246"],["247"],"no-global-assign","no-unsafe-negation",{"desc":"248","fix":"249"},{"desc":"248","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"248","fix":"255"},{"desc":"256","fix":"257"},{"desc":"248","fix":"258"},{"desc":"259","fix":"260"},{"desc":"248","fix":"261"},"Update the dependencies array to be: [isLoggedIn]",{"range":"262","text":"263"},{"range":"264","text":"263"},"Update the dependencies array to be: [alternativa1, alternativa2, alternativa3, alternativa4, alternativa5, categoriasQuestao, imagem1, imagem2, imagem3, imagem4, imagem5]",{"range":"265","text":"266"},"Update the dependencies array to be: [categoriasQuestao, imagemQuestao, palavraQuestao]",{"range":"267","text":"268"},{"range":"269","text":"263"},"Update the dependencies array to be: [alternativaCerta, alternativaErrada1, alternativaErrada2, alternativaErrada3, alternativaErrada4, categoriasQuestao, imagemQuestao, token]",{"range":"270","text":"271"},{"range":"272","text":"263"},"Update the dependencies array to be: [categoriasQuestao, fraseQuestao, token]",{"range":"273","text":"274"},{"range":"275","text":"263"},[2461,2463],"[isLoggedIn]",[3150,3152],[5221,5240],"[alternativa1, alternativa2, alternativa3, alternativa4, alternativa5, categoriasQuestao, imagem1, imagem2, imagem3, imagem4, imagem5]",[2904,2923],"[categoriasQuestao, imagemQuestao, palavraQuestao]",[4615,4617],[4824,4843],"[alternativaCerta, alternativaErrada1, alternativaErrada2, alternativaErrada3, alternativaErrada4, categoriasQuestao, imagemQuestao, token]",[5556,5558],[3066,3085],"[categoriasQuestao, fraseQuestao, token]",[4266,4268]]